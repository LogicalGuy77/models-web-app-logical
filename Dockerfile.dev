# --- Clone the kubeflow/kubeflow code ---
FROM ubuntu AS fetch-kubeflow-kubeflow

# Update package lists, install git and ca-certificates, update certs, clean up
RUN apt-get update && \
    apt-get install -y --no-install-recommends git ca-certificates && \
    update-ca-certificates && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /kf
COPY ./frontend/COMMIT ./
RUN git clone https://github.com/kubeflow/kubeflow.git && \
    COMMIT=$(cat ./COMMIT) && \
    cd kubeflow && \
    # Fetch is no longer needed after a full clone
    git checkout $COMMIT

# --- Build the backend kubeflow-wheel ---
FROM python:3.12-slim AS backend-kubeflow-wheel

WORKDIR /src
RUN pip install --no-cache-dir setuptools wheel

ARG BACKEND_LIB=/kf/kubeflow/components/crud-web-apps/common/backend
COPY --from=fetch-kubeflow-kubeflow $BACKEND_LIB .
RUN python setup.py sdist bdist_wheel

# --- Build the frontend kubeflow library ---
FROM node:22-bookworm-slim AS frontend-kubeflow-lib

WORKDIR /src
ARG LIB=/kf/kubeflow/components/crud-web-apps/common/frontend/kubeflow-common-lib
COPY --from=fetch-kubeflow-kubeflow $LIB/package*.json ./
RUN npm install --no-audit --no-fund --no-update-notifier

COPY --from=fetch-kubeflow-kubeflow $LIB/ ./
RUN npm run build

# --- Build the main frontend for development (base href /) ---
FROM node:22-bookworm-slim AS frontend

WORKDIR /src
COPY ./frontend/package*.json ./
ENV NODE_OPTIONS=--openssl-legacy-provider
RUN npm install --legacy-peer-deps --no-audit --no-fund --no-update-notifier
COPY --from=frontend-kubeflow-lib /src/dist/kubeflow/ ./node_modules/kubeflow/

COPY ./frontend/ .
# Build with default base href "/" for development
RUN npm run build -- --output-path=./dist/default --configuration=production

# --- Development Image ---
FROM python:3.12-slim

WORKDIR /package
COPY --from=backend-kubeflow-wheel /src/dist .
RUN pip3 install --no-cache-dir *.whl

WORKDIR /src
COPY ./backend/requirements.txt .
# Install main requirements
RUN pip3 install --no-cache-dir -r requirements.txt

# Add development dependencies
RUN pip3 install --no-cache-dir kubernetes pytest-mock

# Copy backend code
COPY ./backend/apps/ ./apps
COPY ./backend/entrypoint.py .
COPY ./backend/Makefile .

# Copy built frontend artifacts (built for base href /)
# The backend code expects them here, even if APP_PREFIX is /
COPY --from=frontend /src/dist/default/ /src/apps/v1beta1/static/

# Copy the mock script
COPY ./mock_k8s.py /src/mock_k8s.py

# Set development environment variables
ENV APP_PREFIX=/
ENV APP_VERSION=v1beta1
ENV APP_DISABLE_AUTH="True"
ENV APP_SECURE_COOKIES="False"
ENV BACKEND_MODE="dev"
# Ensure Python finds the mock script and backend code
ENV PYTHONPATH=/src

# Modify entrypoint.py to use the mock in dev mode
# Insert import and call to setup_mock_k8s() near the top
# Use a unique marker comment to avoid duplicate insertions if rebuilt
RUN sed -i '/# --- Add this patching code ---/d' entrypoint.py && \
    sed -i '3i\# --- Add this patching code ---\n# Load mock K8s for development\nif os.environ.get("BACKEND_MODE") == "dev":\n    try:\n        from mock_k8s import setup_mock_k8s\n        setup_mock_k8s()\n        print("Successfully loaded and ran mock_k8s.setup_mock_k8s()")\n    except ImportError as e:\n        print(f"Could not import mock_k8s: {e}")\n# --- End of patching code ---' entrypoint.py

# Modify the run part of entrypoint.py to use debug mode in dev
# Ensure it only modifies the specific app.run() line
RUN sed -i '/if __name__ == "__main__":/!b;n;c\    app.run(host="0.0.0.0", port=5000, debug=(os.environ.get("BACKEND_MODE") == "dev"))' entrypoint.py

# Expose the port
EXPOSE 5000

# Entrypoint using Flask development server
ENTRYPOINT ["python", "entrypoint.py"]